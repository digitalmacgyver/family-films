# Generated by Django 5.2.4 on 2025-07-02 23:56

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DigitalReel',
            fields=[
                ('reel_id', models.CharField(help_text='Label from physical canister', max_length=50, primary_key=True, serialize=False)),
                ('filename', models.CharField(max_length=200)),
                ('format', models.CharField(choices=[('16mm', '16mm'), ('8mm', '8mm'), ('super8', 'Super 8'), ('other', 'Other')], max_length=20)),
                ('fps', models.IntegerField(help_text='Original frames per second')),
                ('frame_count', models.IntegerField(help_text='Total number of frames')),
                ('has_sound', models.BooleanField(default=False)),
                ('scan_batch', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C')], max_length=1)),
                ('scan_resolution', models.CharField(help_text='e.g., 4976x3472', max_length=20)),
            ],
            options={
                'ordering': ['reel_id'],
            },
        ),
        migrations.CreateModel(
            name='Film',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_id', models.CharField(help_text='Unique identifier matching CSV file ID', max_length=50, unique=True)),
                ('youtube_url', models.URLField()),
                ('youtube_id', models.CharField(help_text='YouTube video ID for embedding', max_length=20, unique=True)),
                ('title', models.CharField(max_length=500)),
                ('description', models.TextField()),
                ('summary', models.TextField(help_text='Brief summary of film contents')),
                ('duration', models.DurationField(blank=True, null=True)),
                ('upload_date', models.DateField(blank=True, null=True)),
                ('thumbnail_url', models.URLField(help_text='YouTube thumbnail URL')),
                ('preview_sprite_url', models.URLField(blank=True, help_text='Path to sprite sheet for hover animation')),
                ('preview_frame_count', models.IntegerField(default=0, help_text='Number of frames in preview')),
                ('preview_frame_interval', models.FloatField(default=0.0, help_text='Seconds between preview frames')),
                ('preview_sprite_width', models.IntegerField(default=0, help_text='Width of individual sprite frames')),
                ('preview_sprite_height', models.IntegerField(default=0, help_text='Height of individual sprite frames')),
                ('years', models.CharField(blank=True, help_text='Years when filmed', max_length=100)),
                ('technical_notes', models.TextField(blank=True)),
                ('workflow_state', models.CharField(blank=True, max_length=50)),
            ],
            options={
                'ordering': ['-upload_date', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('tag', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('category', models.CharField(choices=[('holidays', 'Holidays'), ('events', 'Events'), ('activities', 'Activities'), ('people', 'People'), ('places', 'Places'), ('themes', 'Themes'), ('other', 'Other')], default='other', max_length=20)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['tag'],
            },
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.CharField(help_text='MM:SS or HH:MM:SS format', max_length=20)),
                ('start_time_seconds', models.IntegerField(help_text='Start time converted to seconds')),
                ('title', models.CharField(max_length=500)),
                ('description', models.TextField(blank=True)),
                ('order', models.IntegerField()),
                ('has_people_metadata', models.BooleanField(default=False)),
                ('has_location_metadata', models.BooleanField(default=False)),
                ('has_tags_metadata', models.BooleanField(default=False)),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chapters', to='main.film')),
            ],
            options={
                'ordering': ['film', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(default='USA', max_length=100)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
            ],
            options={
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='main_locati_name_64738a_idx'), models.Index(fields=['city', 'state'], name='main_locati_city_d6d277_idx')],
            },
        ),
        migrations.CreateModel(
            name='FilmLocations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_primary', models.BooleanField(default=False, help_text='Main location')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.film')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.location')),
            ],
            options={
                'unique_together': {('film', 'location')},
            },
        ),
        migrations.AddField(
            model_name='film',
            name='locations',
            field=models.ManyToManyField(blank=True, through='main.FilmLocations', to='main.location'),
        ),
        migrations.CreateModel(
            name='ChapterLocations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_primary', models.BooleanField(default=False, help_text='Main location for this chapter')),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.chapter')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.location')),
            ],
            options={
                'unique_together': {('chapter', 'location')},
            },
        ),
        migrations.AddField(
            model_name='chapter',
            name='locations',
            field=models.ManyToManyField(blank=True, through='main.ChapterLocations', to='main.location'),
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('death_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('hayward_index', models.IntegerField(blank=True, help_text='Position in Haywards Present bitfield', null=True)),
                ('father', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children_as_father', to='main.person')),
                ('mother', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children_as_mother', to='main.person')),
                ('spouse', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='spouse_of', to='main.person')),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='FilmPeople',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_primary', models.BooleanField(default=False, help_text='Main subject of film')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.film')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.person')),
            ],
        ),
        migrations.AddField(
            model_name='film',
            name='people',
            field=models.ManyToManyField(blank=True, through='main.FilmPeople', to='main.person'),
        ),
        migrations.CreateModel(
            name='ChapterPeople',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_primary', models.BooleanField(default=False, help_text='Main person in this chapter')),
                ('confidence', models.FloatField(blank=True, help_text='AI confidence score for auto-tagging', null=True)),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.chapter')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.person')),
            ],
        ),
        migrations.AddField(
            model_name='chapter',
            name='people',
            field=models.ManyToManyField(blank=True, through='main.ChapterPeople', to='main.person'),
        ),
        migrations.CreateModel(
            name='Sequence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence_num', models.IntegerField()),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('start_frame', models.IntegerField()),
                ('duration_frames', models.IntegerField()),
                ('start_time_16fps', models.FloatField(help_text='Start time in seconds at 16fps')),
                ('intro_text', models.TextField(blank=True)),
                ('reel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sequences', to='main.digitalreel')),
            ],
            options={
                'ordering': ['reel', 'sequence_num'],
            },
        ),
        migrations.CreateModel(
            name='SequenceLocations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_primary', models.BooleanField(default=False)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.location')),
                ('sequence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.sequence')),
            ],
        ),
        migrations.AddField(
            model_name='sequence',
            name='locations',
            field=models.ManyToManyField(blank=True, through='main.SequenceLocations', to='main.location'),
        ),
        migrations.CreateModel(
            name='SequencePeople',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.person')),
                ('sequence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.sequence')),
            ],
        ),
        migrations.AddField(
            model_name='sequence',
            name='people',
            field=models.ManyToManyField(blank=True, through='main.SequencePeople', to='main.person'),
        ),
        migrations.CreateModel(
            name='SequenceTags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_auto', models.BooleanField(default=False)),
                ('sequence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.sequence')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.tag')),
            ],
        ),
        migrations.AddField(
            model_name='sequence',
            name='tags',
            field=models.ManyToManyField(blank=True, through='main.SequenceTags', to='main.tag'),
        ),
        migrations.CreateModel(
            name='FilmTags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_auto', models.BooleanField(default=False, help_text='Applied by automation')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.film')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.tag')),
            ],
        ),
        migrations.AddField(
            model_name='film',
            name='tags',
            field=models.ManyToManyField(blank=True, through='main.FilmTags', to='main.tag'),
        ),
        migrations.CreateModel(
            name='ChapterTags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_auto', models.BooleanField(default=False, help_text='Applied by automation')),
                ('confidence', models.FloatField(blank=True, help_text='AI confidence score', null=True)),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.chapter')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.tag')),
            ],
        ),
        migrations.AddField(
            model_name='chapter',
            name='tags',
            field=models.ManyToManyField(blank=True, through='main.ChapterTags', to='main.tag'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['last_name'], name='main_person_last_na_917489_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['hayward_index'], name='main_person_hayward_feced3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='filmpeople',
            unique_together={('film', 'person')},
        ),
        migrations.AlterUniqueTogether(
            name='chapterpeople',
            unique_together={('chapter', 'person')},
        ),
        migrations.AlterUniqueTogether(
            name='sequencelocations',
            unique_together={('sequence', 'location')},
        ),
        migrations.AlterUniqueTogether(
            name='sequencepeople',
            unique_together={('sequence', 'person')},
        ),
        migrations.AlterUniqueTogether(
            name='sequencetags',
            unique_together={('sequence', 'tag')},
        ),
        migrations.AlterUniqueTogether(
            name='sequence',
            unique_together={('reel', 'sequence_num')},
        ),
        migrations.AlterUniqueTogether(
            name='filmtags',
            unique_together={('film', 'tag')},
        ),
        migrations.AddIndex(
            model_name='film',
            index=models.Index(fields=['file_id'], name='main_film_file_id_5eb824_idx'),
        ),
        migrations.AddIndex(
            model_name='film',
            index=models.Index(fields=['youtube_id'], name='main_film_youtube_c27cf4_idx'),
        ),
        migrations.AddIndex(
            model_name='film',
            index=models.Index(fields=['upload_date'], name='main_film_upload__be554b_idx'),
        ),
        migrations.AddIndex(
            model_name='film',
            index=models.Index(fields=['years'], name='main_film_years_617329_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='chaptertags',
            unique_together={('chapter', 'tag')},
        ),
        migrations.AddIndex(
            model_name='chapter',
            index=models.Index(fields=['film', 'order'], name='main_chapte_film_id_50d1e9_idx'),
        ),
        migrations.AddIndex(
            model_name='chapter',
            index=models.Index(fields=['start_time_seconds'], name='main_chapte_start_t_caacff_idx'),
        ),
    ]
